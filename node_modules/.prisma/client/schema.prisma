generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  properties   Property[]
  applications Application[]
  reviews      Review[]      @relation("UserReviews")
  reviewsGiven Review[]      @relation("ReviewAuthor")
  activityLogs ActivityLog[]

  @@index([email])
  @@index([lastLoginAt])
  @@map("users")
}

model Property {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  address       String
  city          String
  rent          Int
  rooms         Int
  size          Int
  availableFrom DateTime @default(now())
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  notes         String?

  landlordId Int

  landlord     User            @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  applications Application[]
  images       PropertyImage[]
  reviews      Review[]
  activityLogs ActivityLog[]

  @@index([landlordId])
  @@index([city])
  @@index([rent])
  @@index([isAvailable])
  @@index([createdAt])
  @@map("properties")
}

model PropertyImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  propertyId Int

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([isPrimary])
  @@map("property_images")
}

model Application {
  id            Int               @id @default(autoincrement())
  message       String?
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  internalNotes String?

  userId     Int
  propertyId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
  @@index([createdAt])
  @@map("applications")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId   Int
  userId     Int?
  propertyId Int?

  author   User      @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  user     User?     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([userId])
  @@index([propertyId])
  @@index([rating])
  @@map("reviews")
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int?
  propertyId  Int?
  action      String   @db.VarChar(100)
  description String?
  ipAddress   String?
  metadata    Json?
  createdAt   DateTime @default(now())

  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt(sort: Desc)])
  @@index([propertyId, createdAt(sort: Desc)])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}
