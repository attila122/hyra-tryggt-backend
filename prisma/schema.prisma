generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  properties    Property[]
  applications  Application[]
  reviews       Review[]      @relation("UserReviews")
  reviewsGiven  Review[]      @relation("ReviewAuthor")
  
  @@map("users")
}

model Property {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  address      String
  city         String
  rent         Int
  rooms        Int
  size         Int      // in square meters
  availableFrom DateTime @default(now())
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Foreign keys
  landlordId   Int
  
  // Relations
  landlord     User          @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  applications Application[]
  images       PropertyImage[]
  reviews      Review[]
  
  @@map("properties")
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  alt        String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  // Foreign keys
  propertyId Int
  
  // Relations
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_images")
}

model Application {
  id          Int               @id @default(autoincrement())
  message     String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Foreign keys
  userId      Int
  propertyId  Int
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Ensure one application per user per property
  @@unique([userId, propertyId])
  @@map("applications")
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign keys
  authorId    Int      // User who wrote the review
  userId      Int?     // User being reviewed (for landlord reviews)
  propertyId  Int?     // Property being reviewed
  
  // Relations
  author      User      @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  user        User?     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}